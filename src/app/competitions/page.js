"use client";
import { useState, useEffect } from "react";

const tabs = [
  { key: "—Å—Ç—Ä–µ–ª—å–±–∞",          label: "–°—Ç—Ä–µ–ª—å–±–∞" },
  { key: "—Å–∏–ª–æ–≤—ã–µ_–¥–µ–≤—É—à–∫–∏",   label: "–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–¥–µ–≤—É—à–∫–∏)" },
  { key: "—Å–∏–ª–æ–≤—ã–µ_—é–Ω–æ—à–∏",     label: "–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (—é–Ω–æ—à–∏)" },
  { key: "–ª—ã–∂–∏_–¥–µ–≤—É—à–∫–∏",      label: "–°—Ç–∞—Ä—Ç –ª—ã–∂–∏ (–¥–µ–≤—É—à–∫–∏)" },
  { key: "–ª—ã–∂–∏_—é–Ω–æ—à–∏",        label: "–°—Ç–∞—Ä—Ç –ª—ã–∂–∏ (—é–Ω–æ—à–∏)" },
];

export default function CompetitionsPage() {
  const [active, setActive]  = useState(tabs[0].key);
  const [mode,   setMode]    = useState("individual");
  const [scope,  setScope]   = useState("all"); // region | city | all
  const [columns, setCols]   = useState([]);
  const [rows,    setRows]   = useState([]);
  const [editId,  setEditId] = useState(null);      // id —Å—Ç—Ä–æ–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Å–µ–π—á–∞—Å
  const [draft,   setDraft]  = useState({ value:"", points:"" });

  /* –∑–∞–≥—Ä—É–∑–∫–∞ */
  const load = async (key, md, sc) => {
    const json = await fetch(`/api/competitions?key=${key}&mode=${md}&scope=${sc}`).then(r=>r.json());
    setCols(json.columns);
    setRows(json.rows);
    setEditId(null);
  };
  useEffect(()=>{ load(active, mode, scope); }, [active, mode, scope]);

  /* —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å */
  const saveRow = async (row) => {
    await fetch("/api/competitions", {
      method:"PUT",
      headers:{ "Content-Type":"application/json" },
      body: JSON.stringify({
        participantId: row.id,
        disciplineKey: active,
        value:  draft.value  || null,
        points: draft.points || null,
      }),
    });
    load(active, mode, scope);
  };

  return (
    <div>
      <h1 className="text-2xl font-bold mb-4">–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è</h1>

      {/* —Ä–µ–∂–∏–º —É—á–∞—Å—Ç–∏—è */}
      <div className="flex gap-4 mb-4">
        {[{key:"individual",label:"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π"},
          {key:"team",label:"–ö–æ–º–∞–Ω–¥–Ω—ã–π"}].map(t=>(
          <button key={t.key} onClick={()=>setMode(t.key)}
            className={(mode===t.key
                      ?"border-blue-600 text-blue-600"
                      :"border-transparent text-gray-600 hover:text-gray-800")
                    +" px-4 py-1 border-b-2 font-medium"}>
            {t.label}
          </button>
        ))}

        <select value={scope} onChange={e=>setScope(e.target.value)}
                className="border px-3 py-1 rounded ml-4">
          <option value="region">–û–±–ª–∞—Å—Ç—å</option>
          <option value="city">–ì–æ—Ä–æ–¥</option>
          <option value="all">–í—Å–µ</option>
        </select>
      </div>

      {/* –≤–∫–ª–∞–¥–∫–∏ */}
      <div className="flex border-b mb-4">
        {tabs.map(t=>(
          <button key={t.key} onClick={()=>setActive(t.key)}
            className={(active===t.key
              ?"border-blue-600 text-blue-600"
              :"border-transparent text-gray-600 hover:text-gray-800")
              +" px-4 py-2 -mb-px border-b-2 font-medium"}>
            {t.label}
          </button>
        ))}
      </div>

      {/* —Ç–∞–±–ª–∏—Ü–∞ */}
      <div className="overflow-x-auto bg-white shadow rounded">
        <table className="min-w-full text-sm text-gray-700 border-collapse rounded-md overflow-hidden shadow-sm">
          <thead className="bg-gray-50 text-xs text-gray-500 uppercase">
            <tr>
              {columns.map((c,i)=>(
                <th key={i} className="px-3 py-2 font-medium border border-gray-200 bg-gray-100 whitespace-nowrap">
                  {c}
                </th>
              ))}
              <th className="px-3 py-2 font-medium border border-gray-200 bg-gray-100 whitespace-nowrap" />
            </tr>
          </thead>

          <tbody className="bg-white divide-y divide-gray-200">
            {rows.map((r,i)=>(
              <tr key={r.id}>
                {/* --- —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ --- */}
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">{i+1}</td>
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">
                  {`${r.lastName} ${r.firstName}`}
                </td>
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">{r.abbrev}</td>
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">{r.gender}</td>

                {/* --- value --- */}
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">
                  {editId===r.id
                    ? <input value={draft.value}
                             onChange={e=>setDraft(d=>({...d,value:e.target.value}))}
                             onKeyDown={e=>{ if(e.key==="Enter") saveRow(r); }}
                             className="w-24 border border-gray-300 rounded px-1 py-0.5"/>
                    : (r.value ?? "‚Äî")}
                </td>

                {/* --- points --- */}
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">
                  {editId===r.id
                    ? <input type="number"
                             value={draft.points}
                             onChange={e=>setDraft(d=>({...d,points:e.target.value}))}
                             onKeyDown={e=>{ if(e.key==="Enter") saveRow(r); }}
                             className="w-20 border border-gray-300 rounded px-1 py-0.5"/>
                    : (r.points ?? "‚Äî")}
                </td>

                {/* --- –¥–µ–π—Å—Ç–≤–∏—è --- */}
                <td className="px-3 py-2 border border-gray-100 whitespace-nowrap">
                  {editId===r.id ? (
                    <>
                      <button onClick={()=>saveRow(r)}  className="text-green-600 mr-2">üíæ</button>
                      <button onClick={()=>setEditId(null)} className="text-gray-500">‚úñ</button>
                    </>
                  ) : (
                    <button onClick={()=>{
                              setEditId(r.id);
                              setDraft({ value:r.value||"", points:r.points||"" });
                            }}
                            className="text-blue-600">
                      {r.value==null&&r.points==null ? "‚ûï –î–æ–±–∞–≤–∏—Ç—å" : "‚úèÔ∏è –†–µ–¥–∞–∫—Ç."}
                    </button>
                  )}
                </td>
              </tr>
            ))}

            {rows.length===0 && (
              <tr>
                <td colSpan={columns.length+1}
                    className="px-6 py-6 text-center text-gray-500">
                  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
